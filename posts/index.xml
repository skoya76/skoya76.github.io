<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Koya's Blog</title><link>https://hugo-toha.github.io/posts/</link><description>Recent content in Posts on Koya's Blog</description><generator>Hugo -- gohugo.io</generator><language>jp</language><lastBuildDate>Sat, 03 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo-toha.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Various Consistencies</title><link>https://hugo-toha.github.io/posts/distsys/consistencies/</link><pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/consistencies/</guid><description>本記事はdev.toから移植しました．
Introduction The word &amp;ldquo;consistency&amp;rdquo; has many meanings in computer science. In this article, we will explain the various consistency aspects of distributed system replication in a clear and straightforward manner.
Serializability State machine replication with linearizability sorts transactions into a sequence, and that sequence is guaranteed for all replicas. This is completely independent of real-world time.
Linearizability causes the problems shown in the following figure.
Linearizability only guarantees the update order between replicas, as shown in the figure above, and there is no way to know when that information will be transmitted to other replicas.</description></item><item><title>Failure Models</title><link>https://hugo-toha.github.io/posts/distsys/failuremodels/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/failuremodels/</guid><description>本記事はdev.toから移植しました．
Introduction The previous article explained the communication model for the timing of consensus problem. In this article, we will introduce four general definitions of failure models for consensus problem nodes.
Crash-stop faults This model only places the assumption that the node will Crash-stop faults. Also, a node that is stopped in this model never comes back.
Omission faults This model assumes Crash-stop faults and Omission faults. Omission faults may or may not reply to messages.</description></item><item><title>Communication Models</title><link>https://hugo-toha.github.io/posts/distsys/communicationmodels/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/communicationmodels/</guid><description>本記事はdev.toから移植しました．
Introduction In a standard distributed computing environment, the presence of message-delaying attackers (Communication delays or failures) introduces communication uncertainty. Three communication models are broadly defined for the distributed systems consensus problem.
Synchronous Communication model The synchronous model defines a known finite time range ⊿ for message delivery, and an attacker can only cause a delay of at most ⊿ in the delivery of a message. In other words, when a sender sends a message, it is guaranteed to be received by the other party within a certain time ⊿.</description></item><item><title>Lamport Timestamp</title><link>https://hugo-toha.github.io/posts/distsys/timestamp/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/timestamp/</guid><description>本記事はdev.toから移植しました．
Introduction Lamport timestamp is a method proposed by Leslie Lamport for generating sequence numbers that are consistent with a causality law.
Lamport timestamp Each node (replica) is assigned a unique ID. (counter, NodeID) is the timestamp If the counters have the same value, the one with the larger node ID is considered the larger timestamp. (3,2) &amp;lt; (3,5) When a node generates a timestamp, it compares the largest value it is aware of with the client&amp;rsquo;s value and sets the larger value as the timestamp counter value.</description></item><item><title>Total Order Broadcast</title><link>https://hugo-toha.github.io/posts/distsys/tob/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/tob/</guid><description>本記事はdev.toから移植しました．
What is Total order? The way to determine if a given element is in total order is simple. That is, &amp;ldquo;Can you put those elements in a row?&amp;rdquo;.
For example, what if the natural numbers 7, 8, 1, 4, and 5 are given? We can then serialize 1&amp;lt;4&amp;lt;5&amp;lt;7&amp;lt;8. In other words, the natural numbers are total order.
What about the sets {b, d}, {d,d} {z, b} next? They cannot be serialized.</description></item><item><title>State Machine Replication</title><link>https://hugo-toha.github.io/posts/distsys/smr/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/smr/</guid><description>本記事はdev.toから移植しました．
Introduction In computer science, state machine replication (SMR) or state machine approach is a general method for implementing a fault-tolerant service by replicating servers and coordinating client interactions with server replicas. The approach also provides a framework for understanding and designing replication management protocols [Wikipedia].
What is Fault-tolerant? Fault tolerance is simply the property that guarantees the provision of service without problems even if some of the replicated copies break down.</description></item><item><title>What is the Paxos?</title><link>https://hugo-toha.github.io/posts/distsys/paxos/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/paxos/</guid><description>本記事はdev.toから移植しました．
Introduction Paxos is a consensus algorithm in distributed systems. The consensus algorithm is an algorithm that determines (agrees on) a single value within a network of multiple nodes.
Paxos wants to do In a phrase, Paxos wants to determine a single value that will not be overturned. Specifically, computers that are independent of each other (do not share memory) and exchange information only through the network participate in the consensus, and if a majority of them choose the same value, them all learn that value and it cannot be overturned.</description></item><item><title>KAGのインターンに参加したお話</title><link>https://hugo-toha.github.io/posts/internship/kag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/internship/kag/</guid><description>．．．</description></item><item><title>What is the MultiPaxos?</title><link>https://hugo-toha.github.io/posts/distsys/multipaxos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/distsys/multipaxos/</guid><description>本記事はdev.toから移植しました．
Introduction In my last article, I wrote about Paxos (What is Paxos?). Paxos could only determine a single value. Nothing more, nothing less.
SMR and Total Order Broadcast SMR (State machine replication) is a method of achieving fault-tolerant service by replicating servers and having those servers cooperate. All replicated servers (replicas) have exact copies. This allows for improved availability by allowing a replacement replica to provide service in the event of a failure of one of the replicas.</description></item><item><title>楽天のインターンに参加したお話</title><link>https://hugo-toha.github.io/posts/internship/rakuten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/internship/rakuten/</guid><description>．．．</description></item><item><title>海外インターン（東レ）に参加したお話</title><link>https://hugo-toha.github.io/posts/internship/toray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/internship/toray/</guid><description>．．．</description></item></channel></rss>